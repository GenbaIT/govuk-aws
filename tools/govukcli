#!/bin/bash
#
# govukcli
#
# Some bash to make life easier(tm)
#
set -e

### Global settings
CONFIG_DIR=~/.govukcli
CONTEXT_FILE=$CONFIG_DIR/current-context
CONTEXTS='ci test tools integration staging production staging-aws production-aws'

### Help output
function usage {
  cat << EOF
  ################
      govukcli
  ################

  Usage: govukcli <command> [options]

  Commands:

  set-context <context>    Set the context. This should directly relate to a
                           GOV.UK environment.
  get-context              Get the current context.
  list-contexts            Show the available contexts.

  ssh [options]            Run "$0 ssh help" for details.
  aws [options]            Run "$0 aws help" for details.

  help                     Show this help.

  Set the GOVUKCLI_OUTPUT environment variable to
  one of below for different verbosity:

  silent
  info
  debug

EOF
}

function ssh_usage {
  cat << EOF
  Usage: govukcli ssh [options]

  By default it will expect a Puppet node class (eg backend, frontend), and
  will attempt to SSH to a random instance within that class. If only a single
  instance exists, then it will SSH to that instance (eg puppetmaster,
  jenkins).

  Options:

  set-user <username>  Set a different username to SSH with than the default
                       shell user ($(whoami)).

  node-types           List the types of instances available to connect to.

EOF
}

function aws_usage {
  cat << EOF
  Usage: govukcli aws [options]

  Gets a temporary session for the requested context, including asking for
  your MFA token if needed. By default, passes arguments to the "aws" CLI tool.
  Use the "invoke" command to set up the credentials then invoke another tool.

  Requires your AWS credentials to be set up as in the GOV.UK Developer Docs:
  https://docs.publishing.service.gov.uk/manual/user-management-in-aws.html#storing-credentials-on-disk

  Examples:
    govukcli aws s3 ls
    govukcli aws invoke gof3r get ...

EOF
}

# Set regex for allowed things
ALLOWED_CONTEXTS=$(echo "^(${CONTEXTS})$" | sed 's/ /\|/g')

# Set the verbosity to a smaller variable name
OUT=$GOVUKCLI_OUTPUT
if [[ $OUT == '' ]]; then
  OUT='default'
fi

# Ensure the config directory exists
test -d $CONFIG_DIR || mkdir $CONFIG_DIR


### Helper functions

function error {
  ERROR='\033[0;31m' # Red
  RESET='\033[0m' # Reset to default colour

  MESSAGE=$1
  echo -e "${ERROR}Error: ${MESSAGE}${RESET}\n"
}
function check_allowed_contexts {
  if [[ ! $CONTEXT =~ $ALLOWED_CONTEXTS ]]; then
    if [[ $OUT != 'silent' ]]; then
      error "Invalid context '$CONTEXT'"
      echo "Must be one of: "
      for i in $CONTEXTS; do
        echo "  $i"
      done
    fi
    exit 1
  fi
}

function check_context {
  if [[ ! -f $CONTEXT_FILE ]]; then
    if [[ $OUT != 'silent' ]]; then
      error "Context not set"
      echo "Set context with $0 set-context"
    fi
    exit 1
  fi
}

### Run functions
function list_contexts {
  for i in $CONTEXTS; do
    echo $i
  done |sort
}

function set_context {
  CONTEXT=$1
  if [[ $CONTEXT == '' ]]; then
    if [[ $OUT != 'silent' ]]; then
      error "Select context to set:"
      echo "$0 set-context <environment>"
      echo "Available contexts: "
      list_contexts
    fi
    exit 1
  fi
  check_allowed_contexts

  echo "$CONTEXT" > $CONTEXT_FILE

  if [[ $OUT != 'silent' ]]; then
    echo "Context set to ${CONTEXT}"
  fi
}

function get_context {
  check_context
  CONTEXT=$(cat $CONTEXT_FILE)
  check_allowed_contexts
}

function load_user {
  SSH_USER_FILE=$CONFIG_DIR/ssh-user
  if [[ -f $SSH_USER_FILE ]] && [[ $(cat $SSH_USER_FILE) != '' ]]; then
    SSH_USER=$(cat $SSH_USER_FILE)
  else
    SSH_USER=$(whoami)
  fi
}

function configure_ssh {
  case $GOVUK_ENV in
    'ci')             JUMPBOX="ci-jumpbox.integration.publishing.service.gov.uk";
                      CARRENZA=true;;
    # While we are migrating these need to be specifically defined,
    # but when complete they can be deleted to use the catch all below
    'production')     JUMPBOX="jumpbox.publishing.service.gov.uk";
                      CARRENZA=true;;
    'production-aws') JUMPBOX="jumpbox.production.govuk.digital";;
    'staging')        JUMPBOX="jumpbox.staging.publishing.service.gov.uk";
                      CARRENZA=true;;
    'staging-aws')    JUMPBOX="jumpbox.staging.govuk.digital";;
    *)                JUMPBOX="jumpbox.${GOVUK_ENV}.govuk.digital";;
  esac
}

function run_ssh {
  get_context
  GOVUK_ENV="$CONTEXT"

  configure_ssh

  case $OUT in
    silent) SSH_OPTS='-q';;
    info) SSH_OPTS='-v';;
    debug) SSH_OPTS='-vvv';;
    *) SSH_OPTS='-q';;
  esac

  case $1 in
    'set-user')
      USERNAME=$2
      if [[ $USERNAME == '' ]]; then
        if [[ $OUT != 'silent' ]]; then
          error "Must specify username"
          ssh_usage
        fi
        exit 1
      fi
      SSH_USER_FILE=$CONFIG_DIR/ssh-user
      echo $USERNAME > $SSH_USER_FILE
      if [[ $OUT != 'silent' ]]; then
        echo "SSH username set to $(cat ${SSH_USER_FILE})"
      fi;;

    'node-types')
      if [[ $CARRENZA == 'true' ]]; then
        error "Only available in AWS."
        ssh_usage
        exit 1
      fi

      load_user

      ssh $SSH_USER@$JUMPBOX "aws ec2 describe-instances --region eu-west-1 |jq -r ' .Reservations[] | .Instances[] | .Tags[] | select(.Key | contains(\"aws_migration\")) | .Value' |sort |uniq |sort"
    ;;

    'help') ssh_usage;;

    *)

      if [[ $1 == '' ]]; then
        if [[ $OUT != 'silent' ]]; then
          ssh_usage
        fi
        exit 1
      elif [ "$1" = "--context" ]; then
          CONTEXT="$2"
          check_allowed_contexts
          GOVUK_ENV="$2"
          configure_ssh

          NODE_CLASS=$3
      else
          NODE_CLASS=$1
      fi

      load_user

      if [[ $NODE_CLASS == 'jumpbox' ]]; then
        ssh -At $SSH_OPTS $SSH_USER@$JUMPBOX
      else
        # This allows the traditional way of SSHing to machines in Carrenza
        # and can be removed when migrated to AWS
        if [[ $CARRENZA == 'true' ]] && [[ $NODE_CLASS =~ ^.*-[1-9]$ ]]; then
          # shellcheck disable=SC2029
          ssh -At $SSH_OPTS $SSH_USER@$JUMPBOX "ssh -q ${NODE_CLASS}"
        else
          # shellcheck disable=SC2029
          ssh -At $SSH_OPTS $SSH_USER@$JUMPBOX "ssh -q \`govuk_node_list --single-node -c ${NODE_CLASS}\`"
        fi
      fi
    ;;
  esac
}

function run_aws {
  if [ -z $1 ] || [ $1 == "help" ]; then
    aws_usage
    exit
  fi

  function _check_credentials {
    ! ([ -z "${AWS_ACCESS_KEY_ID-}" ] || \
    [ -z "${AWS_SECRET_ACCESS_KEY-}" ] || \
    [ -z "${AWS_SESSION_TOKEN-}" ] || \
    [ -z "${AWS_EXPIRATION-}" ] || \
    [ "$(ruby -r time -e 'puts (Time.parse(ENV["AWS_EXPIRATION"]) - Time.now).floor')" -lt 300 ])
  }

  function _get_aws_config {
    PROFILE=$1
    KEY=$2
    awk "/profile ${PROFILE}/ {profile=1} /${KEY}/ && profile==1 {print \$3; exit}" ~/.aws/config
  }

  function _session_name {
    echo "$(whoami)-$(date +%d-%m-%y_%H-%M)"
  }

  function _write_credentials_file {
    function _get_credentials_key {
      echo ${CREDENTIALS} | ruby -e "require 'json'; c = JSON.parse(STDIN.read)['Credentials']; STDOUT << c['$1']"
    }

    FILE=$1
    cat <<- EOF > ${FILE}
    export AWS_ACCESS_KEY_ID=$(_get_credentials_key AccessKeyId)
    export AWS_SECRET_ACCESS_KEY=$(_get_credentials_key SecretAccessKey)
    export AWS_SESSION_TOKEN=$(_get_credentials_key SessionToken)
    export AWS_EXPIRATION=$(_get_credentials_key Expiration)
EOF
  }

  unset AWS_SESSION_TOKEN

  check_context
  get_context
  GOVUK_ENV="$CONTEXT"

  GOVUK_SESSION=~/.aws/gds/govuk/${GOVUK_ENV}
  mkdir -p ~/.aws/gds/govuk
  test -f ${GOVUK_SESSION} && source ${GOVUK_SESSION}

  if ! _check_credentials; then
    unset AWS_SESSION_TOKEN

    # setup AWS access
    SESSION_NAME=$(whoami)-$(date +%d-%m-%y_%H-%M)
    MFA_SERIAL=$(_get_aws_config gds mfa_serial)
    ROLE_ARN=$(_get_aws_config govuk-${GOVUK_ENV} role_arn)

    prompt='Enter MFA token: '
    if [ ! -z "${AWS_EXPIRATION-}" ]; then
      prompt="Your AWS session has expired. ${prompt}"
    fi
    read -rp "${prompt}" MFA_TOKEN

    CREDENTIALS=$(aws \
                  --profile gds \
                  sts assume-role \
                  --role-session-name $SESSION_NAME \
                  --role-arn $ROLE_ARN \
                  --serial-number $MFA_SERIAL \
                  --duration-seconds 28800 \
                  --token-code $MFA_TOKEN) || exit $?

    _write_credentials_file ${GOVUK_SESSION}
    source ${GOVUK_SESSION}
  fi

  case $1 in
    'invoke') shift; "$@";;
    *) aws "$@";;
  esac
}

COMMAND=$1
shift
case ${COMMAND} in
  'get-context') get_context;;
  'list-contexts') list_contexts;;
  'set-context') set_context $1;;
  'ssh') run_ssh "$@";;
  'aws') run_aws "$@";;
  'help') usage ;;
  *) usage ;;
esac
