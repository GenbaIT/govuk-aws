# This is a snippet so should not have a shebang
# shellcheck disable=SC2148
#
# Snippet: associate-eni
#

# See https://aws.amazon.com/premiumsupport/knowledge-center/ec2-ubuntu-secondary-network-interface/
# for explanation of what this script does and why.

echo "[$(date '+%H:%M:%S %d-%m-%Y')] START SNIPPET: associate-eni"

# The environment variables INSTANCE_ID and REGION are set
# in the base snippet
#
F_MIGRATION=$(facter aws_migration)
F_STACKNAME=$(facter aws_stackname)
F_HOSTNAME=$(facter aws_hostname)

IFACE_TYPE="eth"
IFACE_INDEX="1"
IFACE="${IFACE_TYPE}${IFACE_INDEX}"

echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: find network interface ID ..."
if [[ -z $F_MIGRATION ]] || [[ -z $F_STACKNAME ]] || [[ -z $F_HOSTNAME ]] ; then
  echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: ERROR facts not found, skipping associate-eni"
else
  NETWORK_INTERFACE_ID=$(aws ec2 describe-network-interfaces --region=$REGION --filters "Name=tag:aws_migration,Values=$F_MIGRATION" "Name=tag:aws_hostname,Values=$F_HOSTNAME" "Name=tag:aws_stackname,Values=$F_STACKNAME" "Name=status,Values=available" --output=json | jq -r '.NetworkInterfaces[] | .NetworkInterfaceId ')

  if [[ -z $NETWORK_INTERFACE_ID ]] ; then
    echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: ERROR ENI not found"
  else
# If more than one interface ID is returned, select the first one    
    if [[ $( echo $NETWORK_INTERFACE_ID | wc -w) -gt 1 ]] ; then
      NETWORK_INTERFACE_ID=$(echo $NETWORK_INTERFACE_ID | awk '{print $1}')
    fi
    echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: attaching eni to instance ..."
    aws ec2 attach-network-interface --region=$REGION --instance-id=$INSTANCE_ID --network-interface-id=$NETWORK_INTERFACE_ID --device-index ${IFACE_INDEX}

    echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: waiting for ENI to attach..."
    sleep 60
  fi
fi

echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: getting ENI private address"

IP_ADDR=$(aws ec2 describe-network-interfaces --region=$REGION --filters "Name=status,Values=in-use" "Name=tag:aws_migration,Values=$F_MIGRATION" "Name=tag:aws_hostname,Values=$F_HOSTNAME" "Name=tag:aws_stackname,Values=$F_STACKNAME" --output=json | jq '.NetworkInterfaces[0].PrivateIpAddresses[0].PrivateIpAddress'  | perl -ne 's/"//g; print')

SUBNET=$(ruby -r ipaddr -e 'i = IPAddr.new(ARGV[0]); puts i.mask(24)' ${IP_ADDR})
GATEWAY=$(ruby -r ipaddr -e 'i = IPAddr.new(ARGV[0]); puts i.mask(24).succ' ${IP_ADDR})

echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: got IP ${IP_ADDR}. Assuming subnet is ${SUBNET}/24, gateway is ${GATEWAY}."

echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: configuring routes and interface ${IFACE}"
ROUTE_CFG="$(( IFACE_INDEX + 1)) ${IFACE}_rt"
grep -q "${ROUTE_CFG}" /etc/iproute2/rt_tables
HAS_ROUTE_CONFIG=$?

if [ $HAS_ROUTE_CONFIG != 0 ] ; then
    echo "${ROUTE_CFG}" >> /etc/iproute2/rt_tables
fi

echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: configuring ${IFACE}"
cat <<EOF > /etc/network/interfaces.d/${IFACE}.cfg
auto ${IFACE}
iface ${IFACE} inet dhcp
up ip route add default via ${GATEWAY} dev ${IFACE} table ${IFACE}_rt
up ip rule add from ${SUBNET}/24 lookup ${IFACE}_rt prio 1000
EOF

# Prevent the default gateway from being overwritten on the main route table.
cat <<'EOF' > /etc/dhcp/dhclient-enter-hooks.d/restrict-default-gw
case ${interface} in
  eth0)
    ;;
  *)
    unset new_routers
    ;;
esac
EOF

echo "[$(date '+%H:%M:%S %d-%m-%Y')] associate-eni: cycling ${IFACE}"
ifdown "${IFACE}"
ifup "${IFACE}"

echo "[$(date '+%H:%M:%S %d-%m-%Y')] END SNIPPET: associate-eni"

